# automatically generated by the FlatBuffers compiler, do not modify

# namespace: common

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FwrAddons(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FwrAddons()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFwrAddons(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FwrAddons
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FwrAddons
    def CteGainLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # FwrAddons
    def Gain3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # FwrAddons
    def I(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # FwrAddons
    def ISat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def Start(builder): builder.StartObject(4)
def FwrAddonsStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddCteGainLimit(builder, cteGainLimit): builder.PrependFloat64Slot(0, cteGainLimit, 0.0)
def FwrAddonsAddCteGainLimit(builder, cteGainLimit):
    """This method is deprecated. Please switch to AddCteGainLimit."""
    return AddCteGainLimit(builder, cteGainLimit)
def AddGain3(builder, gain3): builder.PrependFloat64Slot(1, gain3, 0.0)
def FwrAddonsAddGain3(builder, gain3):
    """This method is deprecated. Please switch to AddGain3."""
    return AddGain3(builder, gain3)
def AddI(builder, I): builder.PrependFloat64Slot(2, I, 0.0)
def FwrAddonsAddI(builder, I):
    """This method is deprecated. Please switch to AddI."""
    return AddI(builder, I)
def AddISat(builder, ISat): builder.PrependFloat64Slot(3, ISat, 0.0)
def FwrAddonsAddISat(builder, ISat):
    """This method is deprecated. Please switch to AddISat."""
    return AddISat(builder, ISat)
def End(builder): return builder.EndObject()
def FwrAddonsEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)

class FwrAddonsT(object):

    # FwrAddonsT
    def __init__(self):
        self.cteGainLimit = 0.0  # type: float
        self.gain3 = 0.0  # type: float
        self.i = 0.0  # type: float
        self.iSat = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fwrAddons = FwrAddons()
        fwrAddons.Init(buf, pos)
        return cls.InitFromObj(fwrAddons)

    @classmethod
    def InitFromObj(cls, fwrAddons):
        x = FwrAddonsT()
        x._UnPack(fwrAddons)
        return x

    # FwrAddonsT
    def _UnPack(self, fwrAddons):
        if fwrAddons is None:
            return
        self.cteGainLimit = fwrAddons.CteGainLimit()
        self.gain3 = fwrAddons.Gain3()
        self.i = fwrAddons.I()
        self.iSat = fwrAddons.ISat()

    # FwrAddonsT
    def Pack(self, builder):
        Start(builder)
        AddCteGainLimit(builder, self.cteGainLimit)
        AddGain3(builder, self.gain3)
        AddI(builder, self.i)
        AddISat(builder, self.iSat)
        fwrAddons = End(builder)
        return fwrAddons
