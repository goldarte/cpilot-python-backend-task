# automatically generated by the FlatBuffers compiler, do not modify

# namespace: common

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FwrParams(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FwrParams()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFwrParams(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FwrParams
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FwrParams
    def Gain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # FwrParams
    def KdSteering(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # FwrParams
    def Gain2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # FwrParams
    def DtPredictForwardMsec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(4)
def FwrParamsStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddGain(builder, gain): builder.PrependFloat64Slot(0, gain, 0.0)
def FwrParamsAddGain(builder, gain):
    """This method is deprecated. Please switch to AddGain."""
    return AddGain(builder, gain)
def AddKdSteering(builder, kdSteering): builder.PrependFloat64Slot(1, kdSteering, 0.0)
def FwrParamsAddKdSteering(builder, kdSteering):
    """This method is deprecated. Please switch to AddKdSteering."""
    return AddKdSteering(builder, kdSteering)
def AddGain2(builder, gain2): builder.PrependFloat64Slot(2, gain2, 0.0)
def FwrParamsAddGain2(builder, gain2):
    """This method is deprecated. Please switch to AddGain2."""
    return AddGain2(builder, gain2)
def AddDtPredictForwardMsec(builder, dtPredictForwardMsec): builder.PrependInt64Slot(3, dtPredictForwardMsec, 0)
def FwrParamsAddDtPredictForwardMsec(builder, dtPredictForwardMsec):
    """This method is deprecated. Please switch to AddDtPredictForwardMsec."""
    return AddDtPredictForwardMsec(builder, dtPredictForwardMsec)
def End(builder): return builder.EndObject()
def FwrParamsEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)

class FwrParamsT(object):

    # FwrParamsT
    def __init__(self):
        self.gain = 0.0  # type: float
        self.kdSteering = 0.0  # type: float
        self.gain2 = 0.0  # type: float
        self.dtPredictForwardMsec = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fwrParams = FwrParams()
        fwrParams.Init(buf, pos)
        return cls.InitFromObj(fwrParams)

    @classmethod
    def InitFromObj(cls, fwrParams):
        x = FwrParamsT()
        x._UnPack(fwrParams)
        return x

    # FwrParamsT
    def _UnPack(self, fwrParams):
        if fwrParams is None:
            return
        self.gain = fwrParams.Gain()
        self.kdSteering = fwrParams.KdSteering()
        self.gain2 = fwrParams.Gain2()
        self.dtPredictForwardMsec = fwrParams.DtPredictForwardMsec()

    # FwrParamsT
    def Pack(self, builder):
        Start(builder)
        AddGain(builder, self.gain)
        AddKdSteering(builder, self.kdSteering)
        AddGain2(builder, self.gain2)
        AddDtPredictForwardMsec(builder, self.dtPredictForwardMsec)
        fwrParams = End(builder)
        return fwrParams
