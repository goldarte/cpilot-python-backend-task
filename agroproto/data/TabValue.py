# automatically generated by the FlatBuffers compiler, do not modify

# namespace: data

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TabValue(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TabValue()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTabValue(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TabValue
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TabValue
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TabValue
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Start(builder): builder.StartObject(2)
def TabValueStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddKey(builder, key): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)
def TabValueAddKey(builder, key):
    """This method is deprecated. Please switch to AddKey."""
    return AddKey(builder, key)
def AddValue(builder, value): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def TabValueAddValue(builder, value):
    """This method is deprecated. Please switch to AddValue."""
    return AddValue(builder, value)
def End(builder): return builder.EndObject()
def TabValueEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)

class TabValueT(object):

    # TabValueT
    def __init__(self):
        self.key = None  # type: str
        self.value = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        tabValue = TabValue()
        tabValue.Init(buf, pos)
        return cls.InitFromObj(tabValue)

    @classmethod
    def InitFromObj(cls, tabValue):
        x = TabValueT()
        x._UnPack(tabValue)
        return x

    # TabValueT
    def _UnPack(self, tabValue):
        if tabValue is None:
            return
        self.key = tabValue.Key()
        self.value = tabValue.Value()

    # TabValueT
    def Pack(self, builder):
        if self.key is not None:
            key = builder.CreateString(self.key)
        if self.value is not None:
            value = builder.CreateString(self.value)
        Start(builder)
        if self.key is not None:
            AddKey(builder, key)
        if self.value is not None:
            AddValue(builder, value)
        tabValue = End(builder)
        return tabValue
