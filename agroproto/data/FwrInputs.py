# automatically generated by the FlatBuffers compiler, do not modify

# namespace: data

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FwrInputs(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FwrInputs()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFwrInputs(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FwrInputs
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FwrInputs
    def Cte(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # FwrInputs
    def AngleDiff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # FwrInputs
    def Speed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # FwrInputs
    def SteeringRadMeas(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # FwrInputs
    def Dt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def Start(builder): builder.StartObject(5)
def FwrInputsStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddCte(builder, cte): builder.PrependFloat64Slot(0, cte, 0.0)
def FwrInputsAddCte(builder, cte):
    """This method is deprecated. Please switch to AddCte."""
    return AddCte(builder, cte)
def AddAngleDiff(builder, angleDiff): builder.PrependFloat64Slot(1, angleDiff, 0.0)
def FwrInputsAddAngleDiff(builder, angleDiff):
    """This method is deprecated. Please switch to AddAngleDiff."""
    return AddAngleDiff(builder, angleDiff)
def AddSpeed(builder, speed): builder.PrependFloat64Slot(2, speed, 0.0)
def FwrInputsAddSpeed(builder, speed):
    """This method is deprecated. Please switch to AddSpeed."""
    return AddSpeed(builder, speed)
def AddSteeringRadMeas(builder, steeringRadMeas): builder.PrependFloat64Slot(3, steeringRadMeas, 0.0)
def FwrInputsAddSteeringRadMeas(builder, steeringRadMeas):
    """This method is deprecated. Please switch to AddSteeringRadMeas."""
    return AddSteeringRadMeas(builder, steeringRadMeas)
def AddDt(builder, dt): builder.PrependFloat64Slot(4, dt, 0.0)
def FwrInputsAddDt(builder, dt):
    """This method is deprecated. Please switch to AddDt."""
    return AddDt(builder, dt)
def End(builder): return builder.EndObject()
def FwrInputsEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)

class FwrInputsT(object):

    # FwrInputsT
    def __init__(self):
        self.cte = 0.0  # type: float
        self.angleDiff = 0.0  # type: float
        self.speed = 0.0  # type: float
        self.steeringRadMeas = 0.0  # type: float
        self.dt = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fwrInputs = FwrInputs()
        fwrInputs.Init(buf, pos)
        return cls.InitFromObj(fwrInputs)

    @classmethod
    def InitFromObj(cls, fwrInputs):
        x = FwrInputsT()
        x._UnPack(fwrInputs)
        return x

    # FwrInputsT
    def _UnPack(self, fwrInputs):
        if fwrInputs is None:
            return
        self.cte = fwrInputs.Cte()
        self.angleDiff = fwrInputs.AngleDiff()
        self.speed = fwrInputs.Speed()
        self.steeringRadMeas = fwrInputs.SteeringRadMeas()
        self.dt = fwrInputs.Dt()

    # FwrInputsT
    def Pack(self, builder):
        Start(builder)
        AddCte(builder, self.cte)
        AddAngleDiff(builder, self.angleDiff)
        AddSpeed(builder, self.speed)
        AddSteeringRadMeas(builder, self.steeringRadMeas)
        AddDt(builder, self.dt)
        fwrInputs = End(builder)
        return fwrInputs
