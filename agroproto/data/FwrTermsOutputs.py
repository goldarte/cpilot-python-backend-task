# automatically generated by the FlatBuffers compiler, do not modify

# namespace: data

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FwrTermsOutputs(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FwrTermsOutputs()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFwrTermsOutputs(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FwrTermsOutputs
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FwrTermsOutputs
    def AngleDiffPart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # FwrTermsOutputs
    def CtePart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # FwrTermsOutputs
    def KdSteeringPart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def Start(builder): builder.StartObject(3)
def FwrTermsOutputsStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddAngleDiffPart(builder, angleDiffPart): builder.PrependFloat64Slot(0, angleDiffPart, 0.0)
def FwrTermsOutputsAddAngleDiffPart(builder, angleDiffPart):
    """This method is deprecated. Please switch to AddAngleDiffPart."""
    return AddAngleDiffPart(builder, angleDiffPart)
def AddCtePart(builder, ctePart): builder.PrependFloat64Slot(1, ctePart, 0.0)
def FwrTermsOutputsAddCtePart(builder, ctePart):
    """This method is deprecated. Please switch to AddCtePart."""
    return AddCtePart(builder, ctePart)
def AddKdSteeringPart(builder, kdSteeringPart): builder.PrependFloat64Slot(2, kdSteeringPart, 0.0)
def FwrTermsOutputsAddKdSteeringPart(builder, kdSteeringPart):
    """This method is deprecated. Please switch to AddKdSteeringPart."""
    return AddKdSteeringPart(builder, kdSteeringPart)
def End(builder): return builder.EndObject()
def FwrTermsOutputsEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)

class FwrTermsOutputsT(object):

    # FwrTermsOutputsT
    def __init__(self):
        self.angleDiffPart = 0.0  # type: float
        self.ctePart = 0.0  # type: float
        self.kdSteeringPart = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fwrTermsOutputs = FwrTermsOutputs()
        fwrTermsOutputs.Init(buf, pos)
        return cls.InitFromObj(fwrTermsOutputs)

    @classmethod
    def InitFromObj(cls, fwrTermsOutputs):
        x = FwrTermsOutputsT()
        x._UnPack(fwrTermsOutputs)
        return x

    # FwrTermsOutputsT
    def _UnPack(self, fwrTermsOutputs):
        if fwrTermsOutputs is None:
            return
        self.angleDiffPart = fwrTermsOutputs.AngleDiffPart()
        self.ctePart = fwrTermsOutputs.CtePart()
        self.kdSteeringPart = fwrTermsOutputs.KdSteeringPart()

    # FwrTermsOutputsT
    def Pack(self, builder):
        Start(builder)
        AddAngleDiffPart(builder, self.angleDiffPart)
        AddCtePart(builder, self.ctePart)
        AddKdSteeringPart(builder, self.kdSteeringPart)
        fwrTermsOutputs = End(builder)
        return fwrTermsOutputs
