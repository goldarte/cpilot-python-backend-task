# automatically generated by the FlatBuffers compiler, do not modify

# namespace: data

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CommonInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CommonInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCommonInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CommonInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CommonInfo
    def Speed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # CommonInfo
    def Cte(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # CommonInfo
    def CteOrigin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # CommonInfo
    def CteFlt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def Start(builder): builder.StartObject(4)
def CommonInfoStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddSpeed(builder, speed): builder.PrependFloat64Slot(0, speed, 0.0)
def CommonInfoAddSpeed(builder, speed):
    """This method is deprecated. Please switch to AddSpeed."""
    return AddSpeed(builder, speed)
def AddCte(builder, cte): builder.PrependFloat64Slot(1, cte, 0.0)
def CommonInfoAddCte(builder, cte):
    """This method is deprecated. Please switch to AddCte."""
    return AddCte(builder, cte)
def AddCteOrigin(builder, cteOrigin): builder.PrependFloat64Slot(2, cteOrigin, 0.0)
def CommonInfoAddCteOrigin(builder, cteOrigin):
    """This method is deprecated. Please switch to AddCteOrigin."""
    return AddCteOrigin(builder, cteOrigin)
def AddCteFlt(builder, cteFlt): builder.PrependFloat64Slot(3, cteFlt, 0.0)
def CommonInfoAddCteFlt(builder, cteFlt):
    """This method is deprecated. Please switch to AddCteFlt."""
    return AddCteFlt(builder, cteFlt)
def End(builder): return builder.EndObject()
def CommonInfoEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)

class CommonInfoT(object):

    # CommonInfoT
    def __init__(self):
        self.speed = 0.0  # type: float
        self.cte = 0.0  # type: float
        self.cteOrigin = 0.0  # type: float
        self.cteFlt = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        commonInfo = CommonInfo()
        commonInfo.Init(buf, pos)
        return cls.InitFromObj(commonInfo)

    @classmethod
    def InitFromObj(cls, commonInfo):
        x = CommonInfoT()
        x._UnPack(commonInfo)
        return x

    # CommonInfoT
    def _UnPack(self, commonInfo):
        if commonInfo is None:
            return
        self.speed = commonInfo.Speed()
        self.cte = commonInfo.Cte()
        self.cteOrigin = commonInfo.CteOrigin()
        self.cteFlt = commonInfo.CteFlt()

    # CommonInfoT
    def Pack(self, builder):
        Start(builder)
        AddSpeed(builder, self.speed)
        AddCte(builder, self.cte)
        AddCteOrigin(builder, self.cteOrigin)
        AddCteFlt(builder, self.cteFlt)
        commonInfo = End(builder)
        return commonInfo
