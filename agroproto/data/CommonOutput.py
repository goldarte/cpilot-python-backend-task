# automatically generated by the FlatBuffers compiler, do not modify

# namespace: data

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CommonOutput(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CommonOutput()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCommonOutput(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CommonOutput
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CommonOutput
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CommonOutput
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def Start(builder): builder.StartObject(2)
def CommonOutputStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def CommonOutputAddName(builder, name):
    """This method is deprecated. Please switch to AddName."""
    return AddName(builder, name)
def AddValue(builder, value): builder.PrependFloat64Slot(1, value, 0.0)
def CommonOutputAddValue(builder, value):
    """This method is deprecated. Please switch to AddValue."""
    return AddValue(builder, value)
def End(builder): return builder.EndObject()
def CommonOutputEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)

class CommonOutputT(object):

    # CommonOutputT
    def __init__(self):
        self.name = None  # type: str
        self.value = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        commonOutput = CommonOutput()
        commonOutput.Init(buf, pos)
        return cls.InitFromObj(commonOutput)

    @classmethod
    def InitFromObj(cls, commonOutput):
        x = CommonOutputT()
        x._UnPack(commonOutput)
        return x

    # CommonOutputT
    def _UnPack(self, commonOutput):
        if commonOutput is None:
            return
        self.name = commonOutput.Name()
        self.value = commonOutput.Value()

    # CommonOutputT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        Start(builder)
        if self.name is not None:
            AddName(builder, name)
        AddValue(builder, self.value)
        commonOutput = End(builder)
        return commonOutput
