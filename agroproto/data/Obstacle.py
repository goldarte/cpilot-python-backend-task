# automatically generated by the FlatBuffers compiler, do not modify

# namespace: data

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Obstacle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Obstacle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsObstacle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Obstacle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Obstacle
    def Coords(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 8
            from agroproto.common.Point import Point
            obj = Point()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Obstacle
    def CoordsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Obstacle
    def CoordsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Obstacle
    def AlarmType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(2)
def ObstacleStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddCoords(builder, coords): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(coords), 0)
def ObstacleAddCoords(builder, coords):
    """This method is deprecated. Please switch to AddCoords."""
    return AddCoords(builder, coords)
def StartCoordsVector(builder, numElems): return builder.StartVector(8, numElems, 4)
def ObstacleStartCoordsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartCoordsVector(builder, numElems)
def AddAlarmType(builder, alarmType): builder.PrependInt8Slot(1, alarmType, 0)
def ObstacleAddAlarmType(builder, alarmType):
    """This method is deprecated. Please switch to AddAlarmType."""
    return AddAlarmType(builder, alarmType)
def End(builder): return builder.EndObject()
def ObstacleEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
import agroproto.common.Point
try:
    from typing import List
except:
    pass

class ObstacleT(object):

    # ObstacleT
    def __init__(self):
        self.coords = None  # type: List[agroproto.common.Point.PointT]
        self.alarmType = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        obstacle = Obstacle()
        obstacle.Init(buf, pos)
        return cls.InitFromObj(obstacle)

    @classmethod
    def InitFromObj(cls, obstacle):
        x = ObstacleT()
        x._UnPack(obstacle)
        return x

    # ObstacleT
    def _UnPack(self, obstacle):
        if obstacle is None:
            return
        if not obstacle.CoordsIsNone():
            self.coords = []
            for i in range(obstacle.CoordsLength()):
                if obstacle.Coords(i) is None:
                    self.coords.append(None)
                else:
                    point_ = agroproto.common.Point.PointT.InitFromObj(obstacle.Coords(i))
                    self.coords.append(point_)
        self.alarmType = obstacle.AlarmType()

    # ObstacleT
    def Pack(self, builder):
        if self.coords is not None:
            StartCoordsVector(builder, len(self.coords))
            for i in reversed(range(len(self.coords))):
                self.coords[i].Pack(builder)
            coords = builder.EndVector()
        Start(builder)
        if self.coords is not None:
            AddCoords(builder, coords)
        AddAlarmType(builder, self.alarmType)
        obstacle = End(builder)
        return obstacle
