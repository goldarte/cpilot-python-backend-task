# automatically generated by the FlatBuffers compiler, do not modify

# namespace: data

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FWRegulator(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FWRegulator()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFWRegulator(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FWRegulator
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FWRegulator
    def SavedParams(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from agroproto.common.FwrParams import FwrParams
            obj = FwrParams()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FWRegulator
    def Params(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from agroproto.common.FwrParams import FwrParams
            obj = FwrParams()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FWRegulator
    def Inputs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from agroproto.data.FwrInputs import FwrInputs
            obj = FwrInputs()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FWRegulator
    def Output(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # FWRegulator
    def TermsOutput(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from agroproto.data.FwrTermsOutputs import FwrTermsOutputs
            obj = FwrTermsOutputs()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FWRegulator
    def CommonOutputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from agroproto.data.CommonOutput import CommonOutput
            obj = CommonOutput()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FWRegulator
    def CommonOutputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FWRegulator
    def CommonOutputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def Start(builder): builder.StartObject(6)
def FWRegulatorStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddSavedParams(builder, savedParams): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(savedParams), 0)
def FWRegulatorAddSavedParams(builder, savedParams):
    """This method is deprecated. Please switch to AddSavedParams."""
    return AddSavedParams(builder, savedParams)
def AddParams(builder, params): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(params), 0)
def FWRegulatorAddParams(builder, params):
    """This method is deprecated. Please switch to AddParams."""
    return AddParams(builder, params)
def AddInputs(builder, inputs): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(inputs), 0)
def FWRegulatorAddInputs(builder, inputs):
    """This method is deprecated. Please switch to AddInputs."""
    return AddInputs(builder, inputs)
def AddOutput(builder, output): builder.PrependFloat64Slot(3, output, 0.0)
def FWRegulatorAddOutput(builder, output):
    """This method is deprecated. Please switch to AddOutput."""
    return AddOutput(builder, output)
def AddTermsOutput(builder, termsOutput): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(termsOutput), 0)
def FWRegulatorAddTermsOutput(builder, termsOutput):
    """This method is deprecated. Please switch to AddTermsOutput."""
    return AddTermsOutput(builder, termsOutput)
def AddCommonOutputs(builder, commonOutputs): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(commonOutputs), 0)
def FWRegulatorAddCommonOutputs(builder, commonOutputs):
    """This method is deprecated. Please switch to AddCommonOutputs."""
    return AddCommonOutputs(builder, commonOutputs)
def StartCommonOutputsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FWRegulatorStartCommonOutputsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartCommonOutputsVector(builder, numElems)
def End(builder): return builder.EndObject()
def FWRegulatorEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
import agroproto.common.FwrParams
import agroproto.data.CommonOutput
import agroproto.data.FwrInputs
import agroproto.data.FwrTermsOutputs
try:
    from typing import List, Optional
except:
    pass

class FWRegulatorT(object):

    # FWRegulatorT
    def __init__(self):
        self.savedParams = None  # type: Optional[agroproto.common.FwrParams.FwrParamsT]
        self.params = None  # type: Optional[agroproto.common.FwrParams.FwrParamsT]
        self.inputs = None  # type: Optional[agroproto.data.FwrInputs.FwrInputsT]
        self.output = 0.0  # type: float
        self.termsOutput = None  # type: Optional[agroproto.data.FwrTermsOutputs.FwrTermsOutputsT]
        self.commonOutputs = None  # type: List[agroproto.data.CommonOutput.CommonOutputT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fWRegulator = FWRegulator()
        fWRegulator.Init(buf, pos)
        return cls.InitFromObj(fWRegulator)

    @classmethod
    def InitFromObj(cls, fWRegulator):
        x = FWRegulatorT()
        x._UnPack(fWRegulator)
        return x

    # FWRegulatorT
    def _UnPack(self, fWRegulator):
        if fWRegulator is None:
            return
        if fWRegulator.SavedParams() is not None:
            self.savedParams = agroproto.common.FwrParams.FwrParamsT.InitFromObj(fWRegulator.SavedParams())
        if fWRegulator.Params() is not None:
            self.params = agroproto.common.FwrParams.FwrParamsT.InitFromObj(fWRegulator.Params())
        if fWRegulator.Inputs() is not None:
            self.inputs = agroproto.data.FwrInputs.FwrInputsT.InitFromObj(fWRegulator.Inputs())
        self.output = fWRegulator.Output()
        if fWRegulator.TermsOutput() is not None:
            self.termsOutput = agroproto.data.FwrTermsOutputs.FwrTermsOutputsT.InitFromObj(fWRegulator.TermsOutput())
        if not fWRegulator.CommonOutputsIsNone():
            self.commonOutputs = []
            for i in range(fWRegulator.CommonOutputsLength()):
                if fWRegulator.CommonOutputs(i) is None:
                    self.commonOutputs.append(None)
                else:
                    commonOutput_ = agroproto.data.CommonOutput.CommonOutputT.InitFromObj(fWRegulator.CommonOutputs(i))
                    self.commonOutputs.append(commonOutput_)

    # FWRegulatorT
    def Pack(self, builder):
        if self.savedParams is not None:
            savedParams = self.savedParams.Pack(builder)
        if self.params is not None:
            params = self.params.Pack(builder)
        if self.inputs is not None:
            inputs = self.inputs.Pack(builder)
        if self.termsOutput is not None:
            termsOutput = self.termsOutput.Pack(builder)
        if self.commonOutputs is not None:
            commonOutputslist = []
            for i in range(len(self.commonOutputs)):
                commonOutputslist.append(self.commonOutputs[i].Pack(builder))
            StartCommonOutputsVector(builder, len(self.commonOutputs))
            for i in reversed(range(len(self.commonOutputs))):
                builder.PrependUOffsetTRelative(commonOutputslist[i])
            commonOutputs = builder.EndVector()
        Start(builder)
        if self.savedParams is not None:
            AddSavedParams(builder, savedParams)
        if self.params is not None:
            AddParams(builder, params)
        if self.inputs is not None:
            AddInputs(builder, inputs)
        AddOutput(builder, self.output)
        if self.termsOutput is not None:
            AddTermsOutput(builder, termsOutput)
        if self.commonOutputs is not None:
            AddCommonOutputs(builder, commonOutputs)
        fWRegulator = End(builder)
        return fWRegulator
