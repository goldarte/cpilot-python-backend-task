# automatically generated by the FlatBuffers compiler, do not modify

# namespace: data

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TabView(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TabView()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTabView(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TabView
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TabView
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TabView
    def Values(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from agroproto.data.TabValue import TabValue
            obj = TabValue()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TabView
    def ValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TabView
    def ValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def Start(builder): builder.StartObject(2)
def TabViewStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddSize(builder, size): builder.PrependInt32Slot(0, size, 0)
def TabViewAddSize(builder, size):
    """This method is deprecated. Please switch to AddSize."""
    return AddSize(builder, size)
def AddValues(builder, values): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)
def TabViewAddValues(builder, values):
    """This method is deprecated. Please switch to AddValues."""
    return AddValues(builder, values)
def StartValuesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TabViewStartValuesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartValuesVector(builder, numElems)
def End(builder): return builder.EndObject()
def TabViewEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
import agroproto.data.TabValue
try:
    from typing import List
except:
    pass

class TabViewT(object):

    # TabViewT
    def __init__(self):
        self.size = 0  # type: int
        self.values = None  # type: List[agroproto.data.TabValue.TabValueT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        tabView = TabView()
        tabView.Init(buf, pos)
        return cls.InitFromObj(tabView)

    @classmethod
    def InitFromObj(cls, tabView):
        x = TabViewT()
        x._UnPack(tabView)
        return x

    # TabViewT
    def _UnPack(self, tabView):
        if tabView is None:
            return
        self.size = tabView.Size()
        if not tabView.ValuesIsNone():
            self.values = []
            for i in range(tabView.ValuesLength()):
                if tabView.Values(i) is None:
                    self.values.append(None)
                else:
                    tabValue_ = agroproto.data.TabValue.TabValueT.InitFromObj(tabView.Values(i))
                    self.values.append(tabValue_)

    # TabViewT
    def Pack(self, builder):
        if self.values is not None:
            valueslist = []
            for i in range(len(self.values)):
                valueslist.append(self.values[i].Pack(builder))
            StartValuesVector(builder, len(self.values))
            for i in reversed(range(len(self.values))):
                builder.PrependUOffsetTRelative(valueslist[i])
            values = builder.EndVector()
        Start(builder)
        AddSize(builder, self.size)
        if self.values is not None:
            AddValues(builder, values)
        tabView = End(builder)
        return tabView
