# automatically generated by the FlatBuffers compiler, do not modify

# namespace: data

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Windrow(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Windrow()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsWindrow(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Windrow
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Windrow
    def CenterLineCoords(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 8
            from agroproto.common.Point import Point
            obj = Point()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Windrow
    def CenterLineCoordsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Windrow
    def CenterLineCoordsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Windrow
    def ContourCoords(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 8
            from agroproto.common.Point import Point
            obj = Point()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Windrow
    def ContourCoordsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Windrow
    def ContourCoordsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Windrow
    def IsTarget(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def Start(builder): builder.StartObject(3)
def WindrowStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddCenterLineCoords(builder, centerLineCoords): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(centerLineCoords), 0)
def WindrowAddCenterLineCoords(builder, centerLineCoords):
    """This method is deprecated. Please switch to AddCenterLineCoords."""
    return AddCenterLineCoords(builder, centerLineCoords)
def StartCenterLineCoordsVector(builder, numElems): return builder.StartVector(8, numElems, 4)
def WindrowStartCenterLineCoordsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartCenterLineCoordsVector(builder, numElems)
def AddContourCoords(builder, contourCoords): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(contourCoords), 0)
def WindrowAddContourCoords(builder, contourCoords):
    """This method is deprecated. Please switch to AddContourCoords."""
    return AddContourCoords(builder, contourCoords)
def StartContourCoordsVector(builder, numElems): return builder.StartVector(8, numElems, 4)
def WindrowStartContourCoordsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartContourCoordsVector(builder, numElems)
def AddIsTarget(builder, isTarget): builder.PrependBoolSlot(2, isTarget, 0)
def WindrowAddIsTarget(builder, isTarget):
    """This method is deprecated. Please switch to AddIsTarget."""
    return AddIsTarget(builder, isTarget)
def End(builder): return builder.EndObject()
def WindrowEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
import agroproto.common.Point
try:
    from typing import List
except:
    pass

class WindrowT(object):

    # WindrowT
    def __init__(self):
        self.centerLineCoords = None  # type: List[agroproto.common.Point.PointT]
        self.contourCoords = None  # type: List[agroproto.common.Point.PointT]
        self.isTarget = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        windrow = Windrow()
        windrow.Init(buf, pos)
        return cls.InitFromObj(windrow)

    @classmethod
    def InitFromObj(cls, windrow):
        x = WindrowT()
        x._UnPack(windrow)
        return x

    # WindrowT
    def _UnPack(self, windrow):
        if windrow is None:
            return
        if not windrow.CenterLineCoordsIsNone():
            self.centerLineCoords = []
            for i in range(windrow.CenterLineCoordsLength()):
                if windrow.CenterLineCoords(i) is None:
                    self.centerLineCoords.append(None)
                else:
                    point_ = agroproto.common.Point.PointT.InitFromObj(windrow.CenterLineCoords(i))
                    self.centerLineCoords.append(point_)
        if not windrow.ContourCoordsIsNone():
            self.contourCoords = []
            for i in range(windrow.ContourCoordsLength()):
                if windrow.ContourCoords(i) is None:
                    self.contourCoords.append(None)
                else:
                    point_ = agroproto.common.Point.PointT.InitFromObj(windrow.ContourCoords(i))
                    self.contourCoords.append(point_)
        self.isTarget = windrow.IsTarget()

    # WindrowT
    def Pack(self, builder):
        if self.centerLineCoords is not None:
            StartCenterLineCoordsVector(builder, len(self.centerLineCoords))
            for i in reversed(range(len(self.centerLineCoords))):
                self.centerLineCoords[i].Pack(builder)
            centerLineCoords = builder.EndVector()
        if self.contourCoords is not None:
            StartContourCoordsVector(builder, len(self.contourCoords))
            for i in reversed(range(len(self.contourCoords))):
                self.contourCoords[i].Pack(builder)
            contourCoords = builder.EndVector()
        Start(builder)
        if self.centerLineCoords is not None:
            AddCenterLineCoords(builder, centerLineCoords)
        if self.contourCoords is not None:
            AddContourCoords(builder, contourCoords)
        AddIsTarget(builder, self.isTarget)
        windrow = End(builder)
        return windrow
