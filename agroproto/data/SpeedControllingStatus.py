# automatically generated by the FlatBuffers compiler, do not modify

# namespace: data

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SpeedControllingStatus(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SpeedControllingStatus()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSpeedControllingStatus(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SpeedControllingStatus
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SpeedControllingStatus
    def CanEnableSpeedControl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SpeedControllingStatus
    def IsSpeedControlEnabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def Start(builder): builder.StartObject(2)
def SpeedControllingStatusStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddCanEnableSpeedControl(builder, canEnableSpeedControl): builder.PrependBoolSlot(0, canEnableSpeedControl, 0)
def SpeedControllingStatusAddCanEnableSpeedControl(builder, canEnableSpeedControl):
    """This method is deprecated. Please switch to AddCanEnableSpeedControl."""
    return AddCanEnableSpeedControl(builder, canEnableSpeedControl)
def AddIsSpeedControlEnabled(builder, isSpeedControlEnabled): builder.PrependBoolSlot(1, isSpeedControlEnabled, 0)
def SpeedControllingStatusAddIsSpeedControlEnabled(builder, isSpeedControlEnabled):
    """This method is deprecated. Please switch to AddIsSpeedControlEnabled."""
    return AddIsSpeedControlEnabled(builder, isSpeedControlEnabled)
def End(builder): return builder.EndObject()
def SpeedControllingStatusEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)

class SpeedControllingStatusT(object):

    # SpeedControllingStatusT
    def __init__(self):
        self.canEnableSpeedControl = False  # type: bool
        self.isSpeedControlEnabled = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        speedControllingStatus = SpeedControllingStatus()
        speedControllingStatus.Init(buf, pos)
        return cls.InitFromObj(speedControllingStatus)

    @classmethod
    def InitFromObj(cls, speedControllingStatus):
        x = SpeedControllingStatusT()
        x._UnPack(speedControllingStatus)
        return x

    # SpeedControllingStatusT
    def _UnPack(self, speedControllingStatus):
        if speedControllingStatus is None:
            return
        self.canEnableSpeedControl = speedControllingStatus.CanEnableSpeedControl()
        self.isSpeedControlEnabled = speedControllingStatus.IsSpeedControlEnabled()

    # SpeedControllingStatusT
    def Pack(self, builder):
        Start(builder)
        AddCanEnableSpeedControl(builder, self.canEnableSpeedControl)
        AddIsSpeedControlEnabled(builder, self.isSpeedControlEnabled)
        speedControllingStatus = End(builder)
        return speedControllingStatus
